name: Add issues to project on creation

on:
  issues:
    types: [opened]

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Add "needs triage" label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Project_bot_issues }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['needs triage']
            })

      - name: Get issue ID
        id: get_issue_id
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Project_bot_issues }}
          result-encoding: string
          script: |
            const result = await github.graphql(`
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  issue(number: ${context.issue.number}) {
                    id
                  }
                }
              }
            `)
            return result.repository.issue.id;

      - name: Add to project board
        id: add_to_project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Project_bot_issues }}
          result-encoding: string
          script: |
            const result = await github.graphql(`
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "PVT_kwHOBwWtRc4A6wWB",
                  contentId: "${{ steps.get_issue_id.outputs.result }}"
                }) {
                  item {
                    id
                  }
                }
              }
            `)
            return result.addProjectV2ItemById.item.id;

      - name: Fill project fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.Project_bot_issues }}
          script: |
            const projectId = 'PVT_kwHOBwWtRc4A6wWB'
            const itemId = '${{ steps.add_to_project.outputs.result }}'

            const fieldUpdates = [
              {
                fieldId: "PVTSSF_lAHOBwWtRc4A6wWBzgvQZ6A", // Status = Backlog
                value: { singleSelectOptionId: "f75ad846" }
              },
              {
                fieldId: "PVTSSF_lAHOBwWtRc4A6wWBzgvQZ9o", // Priority = Medium
                value: { singleSelectOptionId: "8ca69e6f" }
              },
              {
                fieldId: "PVTSSF_lAHOBwWtRc4A6wWBzgvQZ9s", // Size = M
                value: { singleSelectOptionId: "1cc05ec6" }
              },
              {
                fieldId: "PVTSSF_lAHOBwWtRc4A6wWBzgvRHDE", // Type = Tasks
                value: { singleSelectOptionId: "0d73c906" }
              },
              {
                fieldId: "PVTSSF_lAHOBwWtRc4A6wWBzgvQdmw", // QPP Objective = Objective 1
                value: { singleSelectOptionId: "2f4a21a3" }
              }
            ]

            for (const { fieldId, value } of fieldUpdates) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, { projectId, itemId, fieldId, value });
            }
