name: Audit Project Cards

on:
  schedule:
    - cron: '0 13 * * 1-5' # Runs at 1 PM UTC every weekday (Monday-Friday)
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  audit_cards:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.Project_bot_issues }}
      PROJECT_ID: "PVT_kwHOBwWtRc4A6wWB" # The Node ID of your GitHub Project
      TARGET_REPO_OWNER: ${{ github.repository_owner }}
      TARGET_REPO_NAME: ${{ github.event.repository.name || github.repository_owner }}
      # The issue number where the audit report will be posted
      AUDIT_ISSUE_NUMBER: ${{ '1' }} # Set this via Repo Variable or change '1'
      # Comma-separated list of required field names. Must match the names in your project exactly.
      REQUIRED_FIELDS: "Estimate,QPP Objective"

    steps:
      - name: Check for missing fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID;
            const owner = process.env.TARGET_REPO_OWNER;
            const repo = process.env.TARGET_REPO_NAME;
            const auditIssueNumber = process.env.AUDIT_ISSUE_NUMBER;
            const requiredFields = process.env.REQUIRED_FIELDS.split(',').map(f => f.trim()).filter(f => f);

            if (requiredFields.length === 0) {
              console.log("No required fields specified. Exiting.");
              return;
            }

            // This helper function checks if a field's value is considered "empty"
            function isFieldEmpty(fieldValue) {
              if (!fieldValue) return true; // Field is not set at all
              // Check based on field type (add more __typename checks as needed)
              switch (fieldValue.__typename) {
                case 'ProjectV2ItemFieldTextValue':
                  return !fieldValue.text || fieldValue.text.trim() === '';
                case 'ProjectV2ItemFieldSingleSelectValue':
                  return !fieldValue.name;
                case 'ProjectV2ItemFieldUserValue':
                  return fieldValue.users.totalCount === 0;
                case 'ProjectV2ItemFieldIterationValue':
                  // An iteration is empty if its title is one of the "planning" ones or it's not set
                  return !fieldValue.title || fieldValue.title.includes("Planning");
                case 'ProjectV2ItemFieldNumberValue':
                  return fieldValue.number === null;
                case 'ProjectV2ItemFieldDateValue':
                  return !fieldValue.date;
                default:
                  return false;
              }
            }

            let nonCompliantItems = [];
            let hasNextPage = true;
            let cursor = null;

            console.log(`Auditing project ${projectId} for required fields: ${requiredFields.join(', ')}`);

            while(hasNextPage) {
              const query = `
                query($projectId: ID!, $cursor: String) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100, after: $cursor) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                              title
                              url
                              state
                            }
                          }
                          fieldValues(first: 20) {
                            nodes {
                              __typename
                              ... on ProjectV2ItemFieldTextValue { text, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldSingleSelectValue { name, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldUserValue { users(first:1) { totalCount }, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldIterationValue { title, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldNumberValue { number, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldDateValue { date, field { ... on ProjectV2Field { name } } }
                            }
                          }
                        }
                      }
                    }
                  }
                }`;

              const result = await github.graphql(query, { projectId, cursor });
              const items = result.node.items.nodes;

              for (const item of items) {
                // Only check items that are open issues
                if (!item.content || item.content.__typename !== 'Issue' || item.content.state !== 'OPEN') {
                  continue;
                }
                
                let missingFields = [];
                // Create a map of existing field values for easy lookup
                const itemFields = new Map(item.fieldValues.nodes.map(fv => [fv.field.name, fv]));

                for (const requiredField of requiredFields) {
                  const fieldValue = itemFields.get(requiredField);
                  if (isFieldEmpty(fieldValue)) {
                    missingFields.push(requiredField);
                  }
                }
                
                if (missingFields.length > 0) {
                  nonCompliantItems.push({
                    number: item.content.number,
                    title: item.content.title,
                    url: item.content.url,
                    missing: missingFields.join(', ')
                  });
                }
              }

              hasNextPage = result.node.items.pageInfo.hasNextPage;
              cursor = result.node.items.pageInfo.endCursor;
            }

            // --- Generate and post the report ---
            const now = new Date().toUTCString();
            let reportBody = `### ðŸ¤– Project Card Audit Report - ${now}\n\n`;

            if (nonCompliantItems.length === 0) {
              reportBody += `âœ… All cards are compliant! No open issues found with missing required fields: **${requiredFields.join(', ')}**.`;
            } else {
              reportBody += `Found **${nonCompliantItems.length}** open issue(s) with missing required fields:\n\n`;
              reportBody += '| Issue | Missing Fields |\n';
              reportBody += '|---|---|\n';
              for (const item of nonCompliantItems) {
                reportBody += `| [#${item.number} ${item.title}](${item.url}) | \`${item.missing}\` |\n`;
              }
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: auditIssueNumber,
              body: reportBody
            });

            console.log(`Report posted to issue #${auditIssueNumber}.`);