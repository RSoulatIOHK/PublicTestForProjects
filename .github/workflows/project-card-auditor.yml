name: Audit Project Cards (DEBUG MODE)

on:
  workflow_dispatch: # Manual trigger only for this debug run

jobs:
  audit_cards_debug:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.Project_bot_issues }}
      PROJECT_ID: "PVT_kwHOBwWtRc4A6wWB"
      # IMPORTANT: Change '123' to the number of your open issue with the empty "Estimate" field
      DEBUG_ISSUE_NUMBER: '13' 

    steps:
      - name: Find and Dump Data for Specific Issue Card
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID;
            const debugIssueNumber = parseInt(process.env.DEBUG_ISSUE_NUMBER);

            console.log(`--- STARTING DEEP DEBUG ---`);
            console.log(`Searching for project card linked to Issue #${debugIssueNumber} in project ${projectId}`);

            let hasNextPage = true;
            let cursor = null;
            let itemFound = false;

            while(hasNextPage && !itemFound) {
              const query = `
                query($projectId: ID!, $cursor: String) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100, after: $cursor) {
                        pageInfo { hasNextPage, endCursor }
                        nodes {
                          id
                          content {
                            __typename
                            ... on Issue { id, number, title, state }
                            ... on PullRequest { id, number, title, state }
                          }
                          fieldValues(first: 50) {
                            nodes {
                              __typename
                              ... on ProjectV2ItemFieldTextValue { text, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldSingleSelectValue { name, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldUserValue { users(first:5) { totalCount, nodes { login } }, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldIterationValue { title, startDate, duration, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldNumberValue { number, field { ... on ProjectV2Field { name } } }
                              ... on ProjectV2ItemFieldDateValue { date, field { ... on ProjectV2Field { name } } }
                            }
                          }
                        }
                      }
                    }
                  }
                }`;

              const result = await github.graphql(query, { projectId, cursor });
              const items = result.node.items.nodes;

              for (const item of items) {
                if (item.content && item.content.number === debugIssueNumber) {
                  console.log(`\n✅ FOUND DEBUG ITEM (Issue #${item.content.number}). DUMPING RAW DATA:\n`);
                  // This prints the entire object for us to inspect
                  console.log(JSON.stringify(item, null, 2));
                  console.log('\n--- END OF DEEP DEBUG ---');
                  itemFound = true;
                  break; 
                }
              }

              if (itemFound) break;

              hasNextPage = result.node.items.pageInfo.hasNextPage;
              cursor = result.node.items.pageInfo.endCursor;
            }

            if (!itemFound) {
              console.log(`\n❌ FAILED TO FIND project item for issue #${debugIssueNumber} in the project.`);
              core.setFailed(`Could not find the specified debug issue.`);
            }